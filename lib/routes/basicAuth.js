'use strict';

const express = require('express');
const router = express.Router();
const Users = require('../models/users.js');
const basicAuth = require('../middleware/basic-auth-middleware.js');

/**
 * creates an individual user object and adds it to the users database
 * @route POST /signup
 * @param {user_request.model} user.body.required - the new user
 * @returns {token.model} 200 - a token generated by a generateToken method
 * @returns {Error} 403 - You cannot do this!
 * @returns {Error} 500 - unexpected error
 */
router.post('/signup', async (req, res) => {
  try {
    const existingUser = await Users.findOne({ username: req.body.username });

    if (existingUser) {
      throw new Error('User already exists!');
    }

    const user = new Users(req.body);
    const createdUser = await user.save(req.body);
    const token = await createdUser.generateToken(user);
    res.status(200).send(token);
  } catch (err) {
    console.error(err.message);
    res.status(403).send('You cannot do this!');
  }
});

/**
 * signs into the server and returns a token
 * @route POST /signin
 * @returns {token.model} 200 - a token generated by a generateToken method
 * @returns {Error} 403 - invalid login
 * @returns {Error} 500 - unexpected error
 */
router.post('/signin', basicAuth, (req, res) => {
  res.status(200).send(req.token);
});

/**
 * fetches an array of user objects along with the count of objects
 * @route GET /users
 * @returns {users.model} 200 - An object containing an array of products and the array count
 * @returns {Error} 403 - invalid login
 * @returns {Error} 500 - unexpected error
 */
router.get('/users', basicAuth, (req, res) => {
  Users.find({}).then((results) => {
    let output = {
      count: results.length,
      results,
      token: req.token,
    };
    res.status(200).json(output);
  });
});

module.exports = router;
